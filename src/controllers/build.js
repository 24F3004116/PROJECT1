import { generateCodeFromLLM } from '../services/llm.service.js';
import { createOrGetRepo, pushFilesToRepo, enableGitHubPages, getFileContentFromRepo } from '../services/github.service.js';
import { notifyEvaluator } from '../services/notification.service.js';
import { readFileSync } from 'fs';

const decodeAttachment = (attachment) => {
  const { name, url } = attachment;
  const base64String = url.split(',')[1];
  const content = Buffer.from(base64String, 'base64').toString('utf8');
  return `File Name: ${name}\nContent:\n${content}`;
};

const processTask = async (taskData) => {
  const { email, task, round, nonce, brief, attachments, evaluation_url } = taskData;
  const repoName = task;
  const owner = process.env.GITHUB_USERNAME;

  console.log(`Starting process for task: ${task}, round: ${round}`);
  
  let existingCode = '';
  if (round > 1) {
    existingCode = await getFileContentFromRepo(repoName, 'index.html');
  }

  const attachmentContent = attachments?.map(decodeAttachment).join('\n\n') || '';

  const generatedHtml = await generateCodeFromLLM(brief, existingCode, attachmentContent);
  console.log('Code generated by LLM.');

  await createOrGetRepo(repoName);

  const mitLicense = readFileSync('./LICENSE_TEMPLATE.txt', 'utf-8');
  const readmeContent = `# ${repoName}\n\nThis project was automatically generated for task ID: ${task}.`;

  const filesToPush = [
    { path: 'index.html', content: generatedHtml },
    { path: 'LICENSE', content: mitLicense },
    { path: 'README.md', content: readmeContent },
  ];
  
  const commitSha = await pushFilesToRepo(repoName, filesToPush, `Commit for round ${round}`);
  console.log(`Files pushed to repo. Commit SHA: ${commitSha}`);
  
  await enableGitHubPages(repoName);

  const payload = {
    email,
    task,
    round,
    nonce,
    repo_url: `https://github.com/${owner}/${repoName}`,
    commit_sha: commitSha,
    pages_url: `https://${owner}.github.io/${repoName}/`,
  };

  await notifyEvaluator(evaluation_url, payload);
  console.log('Process completed successfully!');
};

export const handleBuildRequest = async (req, res) => {
  const { secret } = req.body;
  if (secret !== process.env.MY_APP_SECRET) {
    return res.status(401).json({ message: 'Error: Invalid secret key!' });
  }

  res.status(200).json({ message: 'Request received. Processing will start in the background.' });
  
  processTask(req.body).catch(error => {
    console.error(`An error occurred during the background process:`, error.message);
  });
};